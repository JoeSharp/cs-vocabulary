{"version":3,"sources":["useVocab.ts","vocab.csv.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ALL_VOCAB","split","filter","s","length","map","lesson","word","definition","trim","join","reduce","acc","existing","find","e","lessons","useVocab","searchTerm","undefined","searchTermLower","toLowerCase","includes","_","i","App","React","useState","setSearchTerm","vocab","type","value","onChange","target","id","className","l","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNASMA,ECTQ,q7pBDSyBC,MAAM,MACxCC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,OAAS,KACvBC,KAAI,SAAAF,GAAC,OAAIA,EAAEF,MAAM,QACjBI,KAAI,iCAAEC,EAAF,KAAUC,EAAV,KAAmBC,EAAnB,iBAAoC,CACrCF,OAAQA,EAAOG,OAAQF,KAAMA,EAAKE,OAAQD,WAAYA,EAAWE,KAAK,UAEzEC,QAAO,SAACC,EAAD,GAAwC,IAAhCN,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACtBK,EAAWD,EAAIE,MAAK,SAAAC,GAAC,OAAIA,EAAER,OAASA,KACxC,MAAM,GAAN,mBACOK,EAAIV,QAAO,SAAAa,GAAC,OAAIA,EAAER,OAASA,MADlC,CAEI,CACIA,OACAS,QAAQ,CAAEV,GAAH,mBAAiBO,EAAWA,EAASG,QAAU,KACtDR,kBAGT,IAaQS,EATE,SAACC,GAAD,OAAuClB,EAAUE,QAAO,YAAoC,IAAjCK,EAAgC,EAAhCA,KAAgC,EAA1BS,QAA0B,EAAjBR,WACvF,QAAmBW,IAAfD,EAA0B,OAAO,EACrC,IAAME,EAAkBF,EAAWG,cAEnC,QAAId,EAAKc,cAAcC,SAASF,MAGjClB,QAAO,SAACqB,EAAGC,GAAJ,OAAUA,EA5BA,O,OEiCLC,EArCsB,WAAO,IAAD,EACLC,IAAMC,SAAiB,IADlB,mBAClCT,EADkC,KACtBU,EADsB,KAMnCC,EAAQZ,EAASC,GAEvB,OACE,gCACE,6DAEA,iCACE,gDACA,uBAAOY,KAAK,OAAOC,MAAOb,EAAYc,SAV1C,SAAC,GAAD,IAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BH,EAAcG,SAavC,wBAAOG,GAAG,cAAV,UACE,gCACE,+BACE,oBAAIC,UAAU,SAAd,oBACA,oBAAIA,UAAU,OAAd,kBACA,oBAAIA,UAAU,aAAd,6BAGJ,gCACGN,EAAMxB,KAAI,WAAgCmB,GAAhC,IAAGR,EAAH,EAAGA,QAAST,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,WAAlB,OAAuC,+BAChD,6BAAKQ,EAAQX,KAAI,SAAA+B,GAAC,OAAI,8BAAMA,SAC5B,6BAAK7B,IACL,6BAAKC,MAHoDgB,eChBtDa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.51730972.chunk.js","sourcesContent":["import rawCsv from './vocab.csv';\n\nexport interface Vocabulary {\n    lessons: string[];\n    word: string;\n    definition: string;\n}\n\nconst MAX_RESULTS = 10;\nconst ALL_VOCAB: Vocabulary[] = rawCsv.split('\\n')\n    .filter(s => s.length > 0)\n    .map(s => s.split(','))\n    .map(([lesson, word, ...definition]) => ({\n        lesson: lesson.trim(), word: word.trim(), definition: definition.join(', ')\n    }))\n    .reduce((acc, { lesson, word, definition }) => {\n        let existing = acc.find(e => e.word === word);\n        return [\n            ...acc.filter(e => e.word !== word),\n            {\n                word,\n                lessons: [lesson, ...(!!existing ? existing.lessons : [])],\n                definition\n            }\n        ]\n    }, [] as Vocabulary[])\n\n\n\nconst useVocab = (searchTerm?: string): Vocabulary[] => ALL_VOCAB.filter(({ word, lessons, definition }) => {\n    if (searchTerm === undefined) return true;\n    const searchTermLower = searchTerm.toLowerCase();\n    // if (lessonName.toLowerCase().includes(searchTermLower)) return true;\n    if (word.toLowerCase().includes(searchTermLower)) return true;\n    // if (definition.toLowerCase().includes(searchTermLower)) return true;\n    return false;\n}).filter((_, i) => i < MAX_RESULTS);\n\nexport default useVocab;","const vocabCsv = `\nLesson 9 - Selection challenge,Comparison operators,\"An operator that is used to compare one operand to another. For example, < >. \"\nLesson 9 - Selection challenge,Selection,Controlling the flow of execution in programs using if statements.\nLesson 9 - Selection challenge,Expression,An expression is a collection of operands and operators that can be evaluated.\nLesson 9 - Selection challenge,Condition,Used to control the flow of execution in a program. A condition contains a logical expression.\nLesson 15 - Data validation,Iteration,\"Repetition of code blocks. For example, a while loop.\"\nLesson 15 - Data validation,Data validation,A check performed on data input to ensure that it can be accepted by the program without causing an error.\nLesson 15 - Data validation,Robustness,A program is robust when it does not produce any errors during execution. \nLesson 15 - Data validation,Try and except,A data validation check to see if the data entered can be accepted by the program. If a defined error occurs the user will be prompted with a warning. \nLesson 10 - Logical expressions ,Boolean expression,An expression that evaluates as True or False. Also known as a logical expression. \nLesson 10 - Logical expressions ,Logical expression,An expression that evaluates as True or False.\nLesson 10 - Logical expressions ,Boolean operator,\"An operator used in a Boolean expression. For example AND, OR and NOT. Also known as logical operators. \"\nLesson 10 - Logical expressions ,Logical operator,\"An operator used in a logical expression. For example AND, OR and NOT. \"\nLesson 10 - Logical expressions ,Expression,An expression is a collection of operands and operators that can be evaluated.\nLesson 10 - Logical expressions ,Operator,A symbol or function that performs an operation. For example +.\nLesson 12 - While loops,Iteration,\"Repetition of code blocks. For example, a while loop.\"\nLesson 18 - Subroutines ,While loop,A loop that will continue to iterate whilst its condition evaluates as True. \nLesson 18 - Subroutines ,Subroutine,A sequence of instructions to perform a specific task with an identifiable name.\nLesson 18 - Subroutines ,Function,A subroutine that returns a value.\nLesson 18 - Subroutines ,Procedure,A subroutine that executes a block of code when called. It does not return a value. \nLesson 18 - Subroutines ,Parameter,Used in a subroutine to allow values to be passed into them. \nLesson 18 - Subroutines ,Argument,The values held in the brackets of a subroutine call. These are passed into a subroutine via the parameters. \nLesson 18 - Subroutines ,Decomposition,Breaking down a problem into smaller sub-problems to make the more manageable. \nLesson 16 & 17 - Pseudocode ,Pseudocode,Informal steps for an algorithm using structured English.\nLesson 16 & 17 - Pseudocode ,Syntax,The formal method used to structure code in a given programming language.\nLesson 16 & 17 - Pseudocode ,Algorithm,A series of instructions that end when the problem is solved. \nLesson 7 - Arithmetic expressions ,Arithmetic expression,An expression that results in a numeric value.\nLesson 7 - Arithmetic expressions ,BIDMAS,\"Acronym used to show the order of operations in an arithmetic expression. Brackets, Indices, Division, Multiplication, Addition and Subtraction. Add and subtract are interchangeable and should be read from left to right. \"\nLesson 7 - Arithmetic expressions ,MOD / Modulo,Calculates the remainder of a division. For example 7 MOD 3 will calculate as 1. \nLesson 7 - Arithmetic expressions ,Integer division,In integer division there can be remainders because the resulting value will be a whole number. For example 7 รท 3 will calculate as 2.\nLesson 7 - Arithmetic expressions ,Real division,In real division there are no remainders because the resulting value can be a decimal number. For example 7 รท 3 will be calculated as 2.3333333333333335.\nLesson 7 - Arithmetic expressions ,Operator,A symbol or function that performs an operation. For example +.\nLesson 6 - Randomisation,True-random number,This type of random number is generated using unpredictable physical means such as atmospheric noise.\nLesson 6 - Randomisation,Pseudo-random number,This type of random number is generated using mathematical algorithms which are computer-generated and therefore highly predictable.\nLesson 6 - Randomisation,Module,\"In Python, a module is a file containing Python definitions and statements. The functionality of these definitions and statements is then available to be made use of.\"\nLesson 6 - Randomisation,Import,The keyword that enables a module to be brought into our programs.\nLesson 6 - Randomisation,Library,\"In Python, the library contains built-in modules that provide access to system functionality such as file i/o.\"\nLesson 13 - Trace tables ,While loop,A loop that will continue to iterate whilst its condition evaluates as True.\nLesson 13 - Trace tables ,Trace table,An error checking method that steps through each line of code in a program and records the state of the variables and conditions. \nLesson 13 - Trace tables ,Selection,Controlling the flow of execution in programs using if statements.\nLesson 13 - Trace tables ,Variable,A value held under one name.\nLesson 13 - Trace tables ,Iteration,\"Repetition of code blocks. For example, a while loop.\"\nLesson 14 - For loops ,For loop,An iterative statement that will repeat for the length of a given sequence. \nLesson 14 - For loops ,While loop,A loop that will continue to iterate whilst its condition evaluates as True.\nLesson 14 - For loops ,Function ,A subroutine that returns a value. \nLesson 14 - For loops ,Return value,A value that is returned by a function.\nLesson 14 - For loops ,Function call,A statement used to execute a function. \nLesson 4 - Input,Input(),A function that prompts the user for input. \nLesson 4 - Input,Boolean data type,A value that is either True or False. \nLesson 4 - Input,Integer,A value that is a whole number.\nLesson 4 - Input,String,A value that is text. This can include numbers but they will be read as text.\nLesson 4 - Input,Character,A single character of string. \nLesson 4 - Input,Real / Float,A decimal number. \nLesson 4 - Input,Concatenate,Join strings together.\nLesson 8 - Selection,Condition,Used to control the flow of execution in a program. A condition contains a logical expression. \nLesson 8 - Selection,Decision symbol,Used on a flowchart to represent a condition.\nLesson 8 - Selection,Selection,Controlling the flow of execution in programs using if statements.\nLesson 8 - Selection,Control flow,The order in which instructions are executed in a program. \nLesson 8 - Selection,Execution,Carrying out the instructions for a computer program.\nLesson 8 - Selection,Logical expression,An expression that results in either True or False. \nLesson 34 - Variables,Declaration,Declaring a variable as a specific data type.\nLesson 34 - Variables,Assignment,Assigning a value to a variable.\nLesson 34 - Variables,Initialisation,Assigning an initial value to a variable to let the compiler know that a memory location is required.\nLesson 34 - Variables,Variable,A value held under one name.\nLesson 34 - Variables,Naming convention,A unified standard for naming things in a chosen programming language. \nLesson 26 - String Handling 1,Concatenate,When two or more strings are joined together. \nLesson 26 - String Handling 1,String,A value that is text. This can include numbers but they will be read as text.\nLesson 26 - String Handling 1,String handling,Performing operations on string. \nLesson 26 - String Handling 1,Element,A character in a string or an item in a sequence. \nLesson 11 - Nested Selection,Selection,Controlling the flow of execution in programs using if statements.\nLesson 11 - Nested Selection,Nested selection,A selection block placed within another selection block. \nLesson 40 - Reading CSV Files,CSV,Acronym for comma-separated values. It is a plaintext data file where each value is separated by a single comma.\nLesson 40 - Reading CSV Files,Method,A function that belongs to an object.\nLesson 40 - Reading CSV Files,Spreadsheet,A document where data can be arranged in rows and columns. A spreadsheet can be used to sort and perform calculations on data. \nLesson 40 - Reading CSV Files,Tabular format,Displaying data in a grid of rows and columns. \nLesson 21 - XOR,XOR,A Boolean / logical operator.\nLesson 21 - XOR,Operator,A symbol or function that performs an operation. For example +.\nLesson 21 - XOR,Function,A subroutine that returns a value.\nLesson 21 - XOR,Parameter,Used in a subroutine to allow values to be passed into them.\nLesson 21 - XOR,Return value,A value that is returned by a function.\nLesson 21 - XOR,Boolean expression,An expression that evaluates as True or False. Also known as a logical expression.\nLesson 21 - XOR,Logical expression,An expression that evaluates as either True or False.\nLesson 21 - XOR,Truth table,A table that lists the outputs of all possible input combinations. \nLesson 41 - Writing to a CSV file,CSV,Acronym for comma-separated values. It is a plaintext data file where each value is separated by a single comma.\nLesson 41 - Writing to a CSV file,Split method,The split method takes a string and splits it when it finds a defined character. The result will be held as a list. \nLesson 41 - Writing to a CSV file,Join method,The join method takes a list and joins each value in that list into one string. \nLesson 23 & 24 - Create a Program,Iterative testing,Testing a program during its creation. \nLesson 23 & 24 - Create a Program,Final testing,Testing a program at the end of its creation. \nLesson 23 & 24 - Create a Program,Erroneous data,Data that should not be accepted by the program or it will cause an error. \nLesson 23 & 24 - Create a Program,Boundary data,Data that should be accepted by a program. It tests the data right at the boundary of a range. \nLesson 23 & 24 - Create a Program,Normal data,Data that should be accepted by a program. This is data that you would expect a user to enter. \nLesson 19 - Functions,Subroutine,A sequence of instructions to perform a specific task with an identifiable name.\nLesson 19 - Functions,Function,A subroutine that returns a value.\nLesson 19 - Functions,Procedure,A subroutine that executes a block of code when called. It does not return a value.\nLesson 19 - Functions,Return value,A value that is returned by a function.\nLesson 19 - Functions,Parameter,Used in a subroutine to allow values to be passed into them.\nLesson 19 - Functions,Argument,The values held in the brackets of a subroutine call. These are passed into a subroutine via the parameters.\nLesson 19 - Functions,Decomposition,Breaking down a problem into smaller sub-problems to make the more manageable.\nLesson 22 - Structured Programming,Interface,\"A term used with subroutines to describe how it will interact with the program. It refers to the subroutine identifier, parameters, order of parameters and the return values.  \"\nLesson 22 - Structured Programming,Structured programming,\"A programming paradigm where sequence, selection, iteration and subroutines are used to control the flow of execution. Each block of code in a structured program has a single entry point and a single exit point.\"\nLesson 22 - Structured Programming,Parameter,Used in a subroutine to allow values to be passed into them.\nLesson 22 - Structured Programming,Return value,A value that is returned by a function.\nLesson 22 - Structured Programming,Function,A subroutine that returns a value.\nLesson 22 - Structured Programming,Procedure,A subroutine that executes a block of code when called. It does not return a value.\nLesson 22 - Structured Programming,Subroutine,A sequence of instructions to perform a specific task with an identifiable name.\nLesson 33 - 2D Array and Lists,2D array,A static data structure that holds data both horizontally and vertically. The structure is fixed and each element has the same data type. \nLesson 33 - 2D Array and Lists,2D list,A dynamic data structure that holds data both horizontally and vertically. The structure can change during program execution and the data types of the elements can be different. \nLesson 38 - Reading Text Files,Data file,A file that can be accessed and modified by a program. \nLesson 38 - Reading Text Files,Text file,A file stored on a computer that contains plain text. \nLesson 42 - Being a Programmer,Meaningful identifiers,Naming a variable or data structure using a sensible name that can be easily recognised and remembered. \nLesson 42 - Being a Programmer,Naming conventions,Following the guidance in the programming language documentation about naming structures.\nLesson 42 - Being a Programmer,Append,Adding to an existing data structure.\nLesson 1 - Translators,Assembly language,A language that replaces machine code with mnemonics and operands to make them easier to read/write. \nLesson 1 - Translators,Assembler,An assembler translates assembly language into machine code.\nLesson 1 - Translators,Compiler,A compiler creates an executable file for a program by translating a high-level language to machine-readable code. \nLesson 1 - Translators,Execute,To carry out the instructions for a computer program.\nLesson 1 - Translators,High-level language,\"A human-readable language written in formal, structured English.\"\nLesson 1 - Translators,Interpreter,An interpreter translates and executes code line by line. It translates the code into machine-readable code. \nLesson 1 - Translators,Low-level language,\"Quickly executed by a computer, written in either machine code or assembly. \"\nLesson 1 - Translators,Machine code,A program written using 1s and 0s. A computer can execute this directly. \nLesson 1 - Translators,Mnemonic,A code to help us remember something. \nLesson 1 - Translators,Operand,A piece of data that can be changed.\nLesson 1 - Translators,Translator,Executes the programs that programmers write in high-level languages.\nLesson 5 - Flowcharts,Flowchart,A visual representation of an algorithm or program. \nLesson 5 - Flowcharts,Subroutine,A sequence of instructions to perform a specific task with an identifiable name.\nLesson 5 - Flowcharts,Terminator,Oval shapes used to show the start and end of a flowchart. \nLesson 37 - Dictionary Challenge,Caesar cipher,Named after Julius Caesar. A caesar cipher is one of the oldest and simplest forms of encryption that involves shifting letters of the alphabet by a defined amount to create an encrypted message. \nLesson 37 - Dictionary Challenge,Dictionary,A data structure that involves creating data pairings that can be located using a key.\nLesson 37 - Dictionary Challenge,Key,\"In a dictionary data structure, a key is used to identify each attribute held in the dictionary.\"\nLesson 37 - Dictionary Challenge,Key-value pair,\"In a dictionary, a key-value pair is when a key (the attribute identifier) is paired with the data. \"\nLesson 39 - Text File,Text file,A file stored on a computer that contains plain text.\nLesson 28 - String Handling 3,ASCII,Acronym for American Standard Code for Information Interchange. It is used to represent characters with a numerical value. \nLesson 28 - String Handling 3,String handling,Performing operations on string.\nLesson 28 - String Handling 3,Substring,Part of a string.\nLesson 28 - String Handling 3,Concatenate,When two or more strings are joined together.\nLesson 44 - Battle Boats Design,Pseudocode,Informal steps for an algorithm using structured English.\nLesson 44 - Battle Boats Design,Flowchart,A visual representation of an algorithm or program.\nLesson 31 - Sense Hat 1,Array,A fixed (static) data structure that holds items of the same data type under one name.\nLesson 31 - Sense Hat 1,List,A dynamic data structure that holds items under one name. The items can be of varying data types.\nLesson 31 - Sense Hat 1,Sense HAT,Hardware that attaches to the top of a Raspberry Pi computer and allows you to write programs that collect data from sensors. The Sense HAT also has an LED matrix for displaying output. \nLesson 31 - Sense Hat 1,Pixel,A single element of an image on a computer screen. \nLesson 31 - Sense Hat 1,Sensor,A tool that collects data. \nLesson 31 - Sense Hat 1,Sense HAT emulator,A digital representation of the physical Sense HAT device. \nLesson 31 - Sense Hat 1,LED matrix,A group of LEDs placed in a grid structure. \nLesson 25 - GUIs,GUI,\"Acronym for Graphical User Interface. It is an event driven program that allows the user to interact with it in a variety of ways. For example, buttons and icons. \"\nLesson 25 - GUIs,guizero,A third party library that can be imported into Python to create a GUI. \nLesson 25 - GUIs,Third party libraries,Code that has not been written by the Python developer or you that can be imported into your programs to save you from writing them yourself if you donโt have the time or necessary skills. \nLesson 20 - Scope,Scope,The scope of a variable is the section of the program where the variable can be accessed and modified.\nLesson 20 - Scope,Parameter,Used in a subroutine to allow values to be passed into them.\nLesson 20 - Scope,Global variable,A global variable can be accessed and modified from anywhere in the program. \nLesson 20 - Scope,Variable,A value held under one name.\nLesson 20 - Scope,Constant,A constant is a value that cannot be changed during the execution of a program. \nLesson 20 - Scope,Function,A subroutine that returns a value.\nLesson 43 - Battle Boats,Success criteria,A list of key elements required in a programming solution based on the scenario or user requirements. \nLesson 36 - Records and Dictionaries,Entity,\"An entity is a single object, place, person or thing. E.g. player\"\nLesson 36 - Records and Dictionaries,Attribute,\"Properties or characteristics of an entity, e.g. player name, player score\"\nLesson 36 - Records and Dictionaries,Field,Also known as an attribute. It is the properties or characteristics of an entity. \nLesson 36 - Records and Dictionaries,Record,A collection of attributes for a single entity. \nLesson 36 - Records and Dictionaries,Database,A structured and organised method for storing data. A database holds multiple records.\nLesson 36 - Records and Dictionaries,Key,\"In a dictionary data structure, a key is used to identify each attribute held in the dictionary. \"\nLesson 36 - Records and Dictionaries,Dictionary,A data structure that involves creating data pairings that can be located using a key. \nLesson 27 - String Handling 2,String handling,Performing operations on string.\nLesson 27 - String Handling 2,Concatenate,When two or more strings are joined together.\nLesson 27 - String Handling 2,Substring,Part of a string. \nLesson 2 - Sequence,Error messages,Used to find errors in your program. They pinpoint lines of code that contain errors and provide details about them. \nLesson 2 - Sequence,Execute,To carry out the instructions for a computer program.\nLesson 2 - Sequence,IDE,Integrated development environment. This is a place to write programs that provides support with debugging and diagnostics.\nLesson 2 - Sequence,Interpreter,An interpreter translates and executes code line by line. It translates the code into machine readable code.\nLesson 2 - Sequence,Logic error,\"The program will run, but wonโt do what the programmer expected. These are tricky to spot as they are not picked up by the IDE.\"\nLesson 2 - Sequence,Sequence,\"The sequence of a program is performed from top to bottom, executing each line in turn. \"\nLesson 2 - Sequence,Subroutine,A sequence of instructions to perform a specific task with an identifiable name. \nLesson 2 - Sequence,Syntax,\"In programming, the language specific code that you write in has its own syntax. The syntax is unique to that programming language.\"\nLesson 2 - Sequence,Syntax error,An error where the code has been structured incorrectly and the syntax rules havenโt been followed. \nLesson 2 - Sequence,Translator,To execute the programs that programmers write in high-level languages.\nLesson 30 - List Methods,Traverse,Move through a sequence.\nLesson 30 - List Methods,Method,A function that belongs to an object. \nLesson 30 - List Methods,Custom built function,A function that you have created yourself and imported into other programs that you have created. \nLesson 30 - List Methods,List,A dynamic data structure that holds items under one name. The items can be of varying data types.\nLesson 34 - 2D List Challenge,2D list,A dynamic data structure that holds data both horizontally and vertically. The structure can change during program execution and the data types of the elements can be different.\nLesson 34 - 2D List Challenge,Iterative testing,Testing a program during its creation.\nLesson 34 - 2D List Challenge,Final testing,Testing a program at the end of its creation.\nLesson 34 - 2D List Challenge,Decomposition,Breaking down a problem into smaller sub-problems to make the more manageable.\nLesson 34 - 2D List Challenge,Interface,\"A term used with subroutines to describe how it will interact with the program. It refers to the subroutine identifier, parameters, order of parameters and the return values.\"\nLesson 34 - 2D List Challenge,Structure chart,A top-down diagram used to design the structure of the subroutines required for completing a program. \n`\nexport default vocabCsv;","import React from 'react';\n\nimport useVocab from './useVocab';\n\nconst App: React.FunctionComponent = () => {\n  const [searchTerm, setSearchTerm] = React.useState<string>('');\n\n  const onSearchTermChanged: React.ChangeEventHandler<HTMLInputElement> =\n    ({ target: { value } }) => setSearchTerm(value);\n\n  const vocab = useVocab(searchTerm);\n\n  return (\n    <div>\n      <h1>Computer Science Vocabulary</h1>\n\n      <form>\n        <label>Search Term</label>\n        <input type='text' value={searchTerm} onChange={onSearchTermChanged}></input>\n      </form>\n\n      <table id='definitions'>\n        <thead>\n          <tr>\n            <th className='lesson'>Lesson</th>\n            <th className='word'>Word</th>\n            <th className='definition'>Definition</th>\n          </tr>\n        </thead>\n        <tbody>\n          {vocab.map(({ lessons, word, definition }, i) => (<tr key={i}>\n            <td>{lessons.map(l => <div>{l}</div>)}</td>\n            <td>{word}</td>\n            <td>{definition}</td>\n          </tr>))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}